name: Reusable workflow - Build tagged WebView-bundle version

on:
  workflow_call:
    inputs:
      bundle_name:
        required: true
        type: string
      squidex_bundle_name:
        required: true
        type: string    
      SQUIDEX_CLIENT_VERSION_ID: 
        required: true
        type: string
      build_command:
        required: false
        type: string
        default: ci:build
      SLACK_CHANNEL:
        required: false
        type: string
        default: ci_cd
      slack_icon:
        required: false
        type: string
        default: cheza
      slack_name:
        required: false
        type: string
        default: 'Название не указано'
    secrets:
      ORG_PERSONAL_ACCESS_TOKEN:
        required: true
      squidex_client_secret:
        required: true
      CI_CD_SLACK_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3 | sed 's/^v-\?//g')" >> $GITHUB_ENV

      - if: ${{ env.VERSION == '' }}
        name: check version existence
        run: echo "version is not exists" && exit 1
      
      # Clean version is version without letters
      - name: Clear version tag
        run: |
          clean_version=$(echo ${{ env.VERSION }} | rev | cut -d "-" -f 1 | rev | sed 's/^v-\?//g')
          echo VERSION_CLEAN=$clean_version >> $GITHUB_ENV
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn

      - name: Build project
        run: export NODE_OPTIONS=--max_old_space_size=8192 && yarn ${{ inputs.build_command }}

      - name: Install node dependencies
        run: yarn add directory-tree

      - name: Download manifest script 
        run: curl https://zebrainy.github.io/scripts/manifest.js > manifest.js

      - name: Generate manifest
        run: node manifest dist ${{ inputs.bundle_name }} ${{ env.VERSION_CLEAN }}

      - name: Archive
        run: |
          pushd dist
          zip -r dist.zip *
          popd
      - name: Prepare S3 upload
        run: |
          mkdir s3
          zipSize=$(stat --printf="%s" dist/dist.zip)
          echo "ZIPSIZE=$zipSize" >> $GITHUB_ENV
          mv dist/dist.zip s3/${{ env.VERSION }}.zip
          mv dist s3/${{ env.VERSION }}

      - name: Upload to S3 SELECTEL
        uses: Zebrainy/s3-sync-action@s1
        with:
          dirname: s3
          s3dirname: web-bundles/bundles/${{ inputs.bundle_name }}
          bucketname: web-bundles
          AWS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SELECTEL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SELECTEL }}      

      - name: Print URLs
        run: |
          echo Selectel:
          echo "https://471631.selcdn.ru/web-bundles/web-bundles/bundles/${{ env.bundle_name }}/${{ env.VERSION }}/index.html"
          echo "https://471631.selcdn.ru/web-bundles/web-bundles/bundles/${{ env.bundle_name }}/${{ env.VERSION }}.zip"
      
      - name: Create build metadata in Squidex
        run: |
          curl https://zebrainy.github.io/scripts/squidex_web_bundle_build.sh > squidex.sh
          chmod +x ./squidex.sh
          SQUIDEX_TOKEN=$(curl    -X POST 'https://cloud.squidex.io/identity-server/connect/token'    -H 'Content-Type: application/x-www-form-urlencoded'    -d 'grant_type=client_credentials&client_id=skazbuka:webgame-cicd&client_secret=${{ secrets.squidex_client_secret }}&scope=squidex-api' | jq .access_token -r)
          ./squidex.sh $SQUIDEX_TOKEN "${{ inputs.bundle_name }}" "${{ env.VERSION_CLEAN }}" "${{ env.BUNDLE_BUILD_URL }}" "${{ inputs.SQUIDEX_CLIENT_VERSION_ID }}" "${{ inputs.squidex_bundle_name }}" "${{ env.ZIPSIZE }}"
        env:
          BUNDLE_BUILD_URL: web-bundles://${{ inputs.bundle_name }}/${{ env.VERSION }}.zip

      - name: GITHUB_HEAD_REF
        run: |
          echo ${{ github.event.base_ref }} > ref.txt
          GIT_BRANCH_NAME=$(sed -E 's/refs\/heads\///' ref.txt)
          echo GIT_BRANCH_NAME=${GIT_BRANCH_NAME} >> $GITHUB_ENV
          echo GITHUB_BRANCH_URL=https://github.com/${{github.repository}}/tree/${GIT_BRANCH_NAME} >> $GITHUB_ENV
          
      - name: Send URLs to slack
        uses: archive/github-actions-slack@v2.4.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.CI_CD_SLACK_TOKEN }}
          slack-channel: ${{ inputs.SLACK_CHANNEL }}
          # slack-optional-icon_emoji: ":${{ inputs.slack_icon }}:"
          slack-text: |
            :${{ inputs.slack_icon }}: *${{ inputs.slack_name }} ${{ env.VERSION_CLEAN }}* (<https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|${{ inputs.bundle_name }}>)
            <https://471631.selcdn.ru/web-bundles/web-bundles/bundles/${{ inputs.bundle_name }}/${{ env.VERSION }}/index.html|Страница сервиса (selectel)>
            *Ветка:* <${{ env.GITHUB_BRANCH_URL }}|${{ env.GIT_BRANCH_NAME }}>
      - name: upload bundle
        uses: actions/upload-artifact@v2.2.0
        with:
          # A file, directory or wildcard pattern that describes what to upload
          path: 's3'
          # Artifact name
          name: bundle
          retention-days: 1
