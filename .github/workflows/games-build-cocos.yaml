name: Reusable workflow - Build game - Cocos

on:
  workflow_call:
    inputs:
      game_name:
        required: true
        type: string
      GAME_NAME_RU:
        required: true
        type: string
      CATALOG_GAME_ID:
        required: true
        type: string
      COCOS_VERSION:
        required: false
        type: string
        default: 3.3.2
      SLACK_CHANNEL:
        required: false
        type: string
        default: ci_cd_games
      version: 
        required: false
        type: string
    secrets:
      CI_CD_SLACK_TOKEN:
        required: true
      squidex_client_secret:
        required: true


jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Download COCOS from Selectel 
        uses: Zebrainy/s3-sync-action@s1
        with:
          dirname: download
          bucketname: web-bundles
          s3dirname: programs/cocos-creator
          FILENAME: cocos-v${{ inputs.COCOS_VERSION }}.zip
          DOWNLOAD: true
          AWS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SELECTEL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SELECTEL }}

      - name: Unzip cocos
        run: unzip ./download/*.zip -d cocos

      - name: Build
        if: github.event.inputs.use-config == 'true'
        id: build
        run: |
          powershell ".\cocos\CocosCreator.exe --project . --build 'configPath=.\build-config.json' --force | Out-Null" || true

      - name: Build without config
        if: github.event.inputs.use-config != 'true'
        run: |
          powershell ".\cocos\CocosCreator.exe --project . --build platform='web-mobile;debug=${{ github.event.inputs.debug }}' --force | Out-Null" || true

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-files
          path: |
            build/web-mobile
          retention-days: 1

  upload:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: build-files
          path: build

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      
      - name: Install Yarn
        run: npm i -g yarn

      - name: Set the version from inputs
        if: github.event.inputs.version != ''
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        
      - name: Set the version from tag
        if: ${{ env.VERSION == '' }}
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3 | sed 's/^v-\?//g')" >> $GITHUB_ENV

      - if: ${{ env.VERSION == '' }}
        name: Check version existence
        run: echo "version does not exist" && exit 1
      
      - name: Install node dependencies
        run: yarn add directory-tree@3.0.1

      - name: disabling SplashScreen and SplashLogo
        run: |
          sed -i 's/"displayWatermark":true,/"displayWatermark":false,/' ./build/src/settings.json || echo "something wrong"
          sed -i 's/"displayRatio":0.4,/"displayRatio":0.0,/' ./build/src/settings.json || echo "something wrong"

      - name: Download manifest script 
        run: curl https://zebrainy.github.io/scripts/manifest.js > manifest.js
      
      - name: Generate manifest
        run: node manifest build ${{ inputs.game_name }} ${{ env.VERSION }}
      
      - name: Archive
        run: |
          pushd build
          zip -r build.zip *
          popd
        
      - name: Prepare S3 upload
        run: |
          mkdir s3
          zipSize=$(stat --printf="%s" build/build.zip)
          echo "ZIPSIZE=$zipSize" >> $GITHUB_ENV
          mv build/build.zip s3/${{ env.VERSION }}.zip
          mv build s3/${{ env.VERSION }}
        
      - name: Upload archive to S3 SELECTEL
        uses: Zebrainy/s3-sync-action@s1
        continue-on-error: true
        with:
          dirname: s3
          s3dirname: web-games/bundles/${{ inputs.game_name }}
          bucketname: web-bundles
          AWS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SELECTEL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SELECTEL }}      

      - name: Create build metadata in Squidex
        run: |
          curl https://zebrainy.github.io/scripts/squidex_create_build.sh > squidex.sh
          chmod +x ./squidex.sh
          SQUIDEX_TOKEN=$(curl    -X POST 'https://cloud.squidex.io/identity-server/connect/token'    -H 'Content-Type: application/x-www-form-urlencoded'    -d 'grant_type=client_credentials&client_id=skazbuka:webgame-cicd&client_secret=${{ secrets.squidex_client_secret }}&scope=squidex-api' | jq .access_token -r)
          ./squidex.sh $SQUIDEX_TOKEN "${{ inputs.game_name }}" "${{ env.VERSION }}" "${{ env.WEBGAME_BUILD_URL }}" "${{ inputs.CATALOG_GAME_ID }}" "${{ env.ZIPSIZE }}" "${{ env.PROTOCOL_URL }}"
        env:
          WEBGAME_BUILD_URL: https://471631.selcdn.ru/web-bundles/web-games/bundles/${{ inputs.game_name }}/${{ env.VERSION }}.zip
          PROTOCOL_URL: web-games://${{ inputs.game_name }}/${{ env.VERSION }}.zip

      - name: Add debug label
        if: github.event.inputs.debug == 'true'
        run: echo "DEBUG_INFO=ðŸ§ª[Debug Build]" >> $GITHUB_ENV

      - name: telegram-send
        continue-on-error: true
        run: |
          MESSAGE=$(cat <<EOT
          ðŸ§© *${{ inputs.game_name }}* *${{ env.VERSION }}* [${{ inputs.GAME_NAME_RU }}](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) ${{ env.DEBUG_INFO }}
          Url: [${{ inputs.game_name }}/${{ env.VERSION }}.zip](https://471631.selcdn.ru/web-bundles/web-games/bundles/${{ inputs.game_name }}/${{ env.VERSION }}.zip)
          EOT
          )

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_APIKEY }}/sendMessage -d chat_id=${{ env.TELEGRAM_ID }} -d text="$MESSAGE" -d parse_mode="markdown"
        env:
          TELEGRAM_ID: -1002060187203
