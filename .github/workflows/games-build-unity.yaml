name: Reusable workflow - Build game - Unity

on:
  workflow_call:
    inputs:
      game_name:
        required: true
        type: string
      GAME_NAME_RU:
        required: true
        type: string
      CATALOG_GAME_ID:
        required: true
        type: string
      DIRECTORY:
        required: false
        type: string
        default: build/WebGL/WebGL
      SLACK_CHANNEL:
        required: false
        type: string
        default: ci_cd_games
      version: 
        required: false
        type: string
    secrets:
      ZEBRAINY_UNITY_EMAIL:
        required: true
      ZEBRAINY_UNITY_PASSWORD:
        required: true
      ZEBRAINY_UNITY_SERIAL:
        required: true
      CI_CD_SLACK_TOKEN:
        required: true
      squidex_client_secret:
        required: true

jobs:
  build-game:
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/checkout@v2

      - name: disabling SplashScreen and SplashLogo
        run: |
          sed -i 's/m_ShowUnitySplashScreen: 1/m_ShowUnitySplashScreen: 0/' ProjectSettings/ProjectSettings.asset
          sed -i 's/m_ShowUnitySplashLogo: 1/m_ShowUnitySplashLogo: 0/' ProjectSettings/ProjectSettings.asset

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      
      - name: Install Yarn
        run: npm i -g yarn

      - name: Set the version from inputs
        if: github.event.inputs.version != ''
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        
      - name: Set the version from tag
        if: ${{ env.VERSION == '' }}
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3 | sed 's/^v-\?//g')" >> $GITHUB_ENV

      - if: ${{ env.VERSION == '' }}
        name: Check version existence
        run: echo "version does not exist" && exit 1

      - uses: game-ci/unity-builder@v2
        name: Build WebGL
        env:
          UNITY_EMAIL: ${{ secrets.ZEBRAINY_UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.ZEBRAINY_UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.ZEBRAINY_UNITY_SERIAL }}
        with:
          targetPlatform: WebGL
          unityVersion: 2021.1.0f1
          allowDirtyBuild: true
      
      - name: Unity cleanup
        run: mv ${{ inputs.DIRECTORY }} ./dist
            
      - name: Sound fix
        run: |
          sed -i "s/function _JS_Sound_SetListenerPosition(x,y,z){if(WEBAudio.audioWebEnabled==0)return;/function _JS_Sound_SetListenerPosition(x,y,z){return;/" ./dist/Build/*.framework.js
          sed -i "s/function _JS_Sound_SetListenerOrientation(x,y,z,xUp,yUp,zUp){if(WEBAudio.audioWebEnabled==0)return;/function _JS_Sound_SetListenerOrientation(x,y,z,xUp,yUp,zUp){return;/" ./dist/Build/*.framework.js
          sed -i "s/function _JS_Sound_SetPosition(channelInstance,x,y,z){if(WEBAudio.audioWebEnabled==0)return;/function _JS_Sound_SetPosition(channelInstance,x,y,z){return;/" ./dist/Build/*.framework.js
          sed -i "s/function _JS_Sound_SetVolume(channelInstance,v){if(WEBAudio.audioWebEnabled==0)return;/function _JS_Sound_SetVolume(channelInstance,v){return;/" ./dist/Build/*.framework.js

      - name: Install node dependencies
        run: yarn add directory-tree@3.0.1

      - name: Download manifest script 
        run: curl https://zebrainy.github.io/scripts/manifest.js > manifest.js
      
      - name: Generate manifest
        run: node manifest dist ${{ inputs.game_name }} ${{ env.VERSION }}
      
      - name: Archive
        run: |
          pushd dist
          zip -r dist.zip *
          popd
        
      - name: Prepare S3 upload
        run: |
          mkdir s3
          zipSize=$(stat --printf="%s" dist/dist.zip)
          echo "ZIPSIZE=$zipSize" >> $GITHUB_ENV
          mv dist/dist.zip s3/${{ env.VERSION }}.zip
          mv dist s3/${{ env.VERSION }}
           
      - name: Upload archive to S3 SELECTEL
        uses: Zebrainy/s3-sync-action@s1
        continue-on-error: true
        with:
          dirname: s3
          s3dirname: web-games/bundles/${{ inputs.game_name }}
          bucketname: web-bundles
          AWS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SELECTEL }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SELECTEL }}      

      - name: Create build metadata in Squidex
        run: |
          curl https://zebrainy.github.io/scripts/squidex_create_build.sh > squidex.sh
          chmod +x ./squidex.sh
          SQUIDEX_TOKEN=$(curl    -X POST 'https://cloud.squidex.io/identity-server/connect/token'    -H 'Content-Type: application/x-www-form-urlencoded'    -d 'grant_type=client_credentials&client_id=skazbuka:webgame-cicd&client_secret=${{ secrets.squidex_client_secret }}&scope=squidex-api' | jq .access_token -r)
          ./squidex.sh $SQUIDEX_TOKEN "${{ inputs.game_name }}" "${{ env.VERSION }}" "${{ env.WEBGAME_BUILD_URL }}" "${{ inputs.CATALOG_GAME_ID }}" "${{ env.ZIPSIZE }}" "${{ env.PROTOCOL_URL }}"
        env:
          WEBGAME_BUILD_URL: https://471631.selcdn.ru/web-bundles/web-games/bundles/${{ inputs.game_name }}/${{ env.VERSION }}.zip
          PROTOCOL_URL: web-games://${{ inputs.game_name }}/${{ env.VERSION }}.zip

      - name: telegram-send
        continue-on-error: true
        run: |
          MESSAGE=$(cat <<EOT
          ðŸ§© *${{ inputs.game_name }}* *${{ env.VERSION }}* [${{ inputs.GAME_NAME_RU }}](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
          Url: [${{ inputs.game_name }}/${{ env.VERSION }}.zip](https://471631.selcdn.ru/web-bundles/web-games/bundles/${{ inputs.game_name }}/${{ env.VERSION }}.zip)
          EOT
          )

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_APIKEY }}/sendMessage -d chat_id=${{ env.TELEGRAM_ID }} -d text="$MESSAGE" -d parse_mode="markdown"
        env:
          TELEGRAM_ID: -1002060187203
